Highcharts.setOptions({lang:{thousandsSep:","}});let chartIdTopStocks=document.getElementById("chart-container-top-stocks-2020");function drawHighcharts(){Highcharts.chart(chartIdTopStocks,{chart:{type:"bar",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"16o2V9k_Yxb4F21u6A5YXBVlGualKV1y2jMDLpJxmhZU"},plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueSuffix:"%"},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:15},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-top-stocks-2020-2",{chart:{type:"line",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"16o2V9k_Yxb4F21u6A5YXBVlGualKV1y2jMDLpJxmhZU",googleSpreadsheetWorksheet:2},plotOptions:{series:{lineWidth:1,marker:{enabled:!1,symbol:"circle",fillColor:"#ffffff",states:{hover:{fillColor:"#ffffff"}}}}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,y:-20,floating:!0,layout:"vertical",itemMarginBottom:60,itemMarginTop:40},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},tickAmount:6,max:75,min:-50},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueSuffix:"%",valueDecimals:1,shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:15},legend:{},tooltip:{enabled:!1}}}]}})}"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
